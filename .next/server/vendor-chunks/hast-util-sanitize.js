"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hast-util-sanitize";
exports.ids = ["vendor-chunks/hast-util-sanitize"];
exports.modules = {

/***/ "(rsc)/./node_modules/hast-util-sanitize/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/hast-util-sanitize/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sanitize: () => (/* binding */ sanitize)\n/* harmony export */ });\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema.js */ \"(rsc)/./node_modules/hast-util-sanitize/lib/schema.js\");\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {Content | Root} Node\n *\n * @typedef {Properties[string]} PropertyValue\n *   Possible property values.\n * @typedef {string | number | boolean} PrimitivePropertyValue\n *   Possible primitive HTML attribute values.\n *\n * @typedef {Record<string, Array<string | [string, ...Array<PrimitivePropertyValue | RegExp>]>>} Attributes\n *  Map of tag names to allow lists for each property.\n * @typedef {Record<string, Array<PrimitivePropertyValue | RegExp>>} AttributeClean\n *   Normalized input.\n *\n * @typedef Schema\n *   Sanitization configuration.\n * @property {Attributes | undefined} [attributes]\n *   Map of tag names to allowed properties.\n *\n *   The special `'*'` key defines property names allowed on all elements.\n * @property {Record<string, Record<string, PropertyValue>> | undefined} [required]\n *   Map of tag names to required property names and their default property value.\n * @property {Array<string> | undefined} [tagNames]\n *   List of allowed tag names.\n * @property {Record<string, Array<string>> | undefined} [protocols]\n *   Map of protocols to allow in property values.\n * @property {Record<string, Array<string>> | undefined} [ancestors]\n *   Map of tag names to their required ancestor elements.\n * @property {Array<string> | undefined} [clobber]\n *   List of allowed property names which can clobber.\n * @property {string | undefined} [clobberPrefix]\n *   Prefix to use before potentially clobbering property names.\n * @property {Array<string> | undefined} [strip]\n *   Names of elements to strip from the tree.\n * @property {boolean | undefined} [allowComments]\n *   Whether to allow comments.\n * @property {boolean | undefined} [allowDoctypes]\n *   Whether to allow doctypes.\n *\n * @typedef {(schema: Schema, value: any, node: any, stack: Array<string>) => unknown} Handler\n * @typedef {Record<string, Handler>} NodeDefinition\n * @typedef {((schema: Schema, node: Node) => NodeDefinition | undefined)} NodeDefinitionGetter\n * @typedef {Record<string, NodeDefinition | NodeDefinitionGetter>} NodeSchema\n */ \nconst own = {}.hasOwnProperty;\n/** @type {NodeSchema} */ const nodeSchema = {\n    root: {\n        children: all\n    },\n    doctype: handleDoctype,\n    comment: handleComment,\n    element: {\n        tagName: handleTagName,\n        properties: handleProperties,\n        children: all\n    },\n    text: {\n        value: handleValue\n    },\n    \"*\": {\n        data: allow,\n        position: allow\n    }\n};\n/**\n * Utility to sanitize a tree\n *\n * @param {Node} node\n *   Hast tree to sanitize\n * @param {Schema} [schema]\n *   Schema defining how to sanitize - defaults to Github style sanitation\n */ function sanitize(node, schema) {\n    /** @type {Node} */ let ctx = {\n        type: \"root\",\n        children: []\n    };\n    if (node && typeof node === \"object\" && node.type) {\n        const replace = one(Object.assign({}, _schema_js__WEBPACK_IMPORTED_MODULE_0__.defaultSchema, schema || {}), node, []);\n        if (replace) {\n            if (Array.isArray(replace)) {\n                if (replace.length === 1) {\n                    ctx = replace[0];\n                } else {\n                    // @ts-expect-error Assume `root` is not a child.\n                    ctx.children = replace;\n                }\n            } else {\n                ctx = replace;\n            }\n        }\n    }\n    return ctx;\n}\n/**\n * Sanitize `node`.\n *\n * @param {Schema} schema\n * @param {Node} node\n * @param {Array<string>} stack\n * @returns {Node | Array<Node> | undefined}\n */ function one(schema, node, stack) {\n    const type = node && node.type;\n    /** @type {Node} */ // @ts-expect-error rest of props added later.\n    const replacement = {\n        type: node.type\n    };\n    /** @type {boolean | undefined} */ let replace;\n    if (own.call(nodeSchema, type)) {\n        /** @type {NodeDefinition | NodeDefinitionGetter | undefined} */ let definition = nodeSchema[type];\n        if (typeof definition === \"function\") {\n            definition = definition(schema, node);\n        }\n        if (definition) {\n            const allowed = Object.assign({}, definition, nodeSchema[\"*\"]);\n            /** @type {string} */ let key;\n            replace = true;\n            for(key in allowed){\n                if (own.call(allowed, key)) {\n                    // @ts-expect-error: fine.\n                    // type-coverage:ignore-next-line\n                    const result = allowed[key](schema, node[key], node, stack);\n                    // eslint-disable-next-line max-depth\n                    if (result === false) {\n                        replace = undefined;\n                        // Set the non-safe value.\n                        // @ts-expect-error: fine.\n                        // type-coverage:ignore-next-line\n                        replacement[key] = node[key];\n                    } else if (result !== undefined && result !== null) {\n                        // @ts-expect-error: fine.\n                        // type-coverage:ignore-next-line\n                        replacement[key] = result;\n                    }\n                }\n            }\n        }\n    }\n    if (replace) {\n        return replacement;\n    }\n    return replacement.type === \"element\" && schema.strip && !schema.strip.includes(replacement.tagName) ? replacement.children : undefined;\n}\n/**\n * Sanitize `children`.\n *\n * @type {Handler}\n * @param {Array<Node>} children\n * @param {Node} node\n * @returns {Array<Node>}\n */ function all(schema, children, node, stack) {\n    /** @type {Array<Node>} */ const results = [];\n    if (Array.isArray(children)) {\n        let index = -1;\n        if (node.type === \"element\") {\n            stack.push(node.tagName);\n        }\n        while(++index < children.length){\n            const value = one(schema, children[index], stack);\n            if (value) {\n                if (Array.isArray(value)) {\n                    results.push(...value);\n                } else {\n                    results.push(value);\n                }\n            }\n        }\n        if (node.type === \"element\") {\n            stack.pop();\n        }\n    }\n    return results;\n}\n/** @type {NodeDefinitionGetter} */ function handleDoctype(schema) {\n    return schema.allowDoctypes ? {\n        name: handleDoctypeName\n    } : undefined;\n}\n/** @type {NodeDefinitionGetter} */ function handleComment(schema) {\n    return schema.allowComments ? {\n        value: handleCommentValue\n    } : undefined;\n}\n/**\n * Sanitize `properties`.\n *\n * @type {Handler}\n * @param {Properties} properties\n * @param {Element} node\n * @returns {Properties}\n */ function handleProperties(schema, properties, node, stack) {\n    const name = handleTagName(schema, node.tagName, node, stack);\n    /* c8 ignore next */ const attrs = schema.attributes || {};\n    /* c8 ignore next */ const reqs = schema.required || {};\n    const props = properties || {};\n    const allowed = Object.assign({}, toPropertyValueMap(attrs[\"*\"]), toPropertyValueMap(name && own.call(attrs, name) ? attrs[name] : []));\n    /** @type {Properties} */ const result = {};\n    /** @type {string} */ let key;\n    for(key in props){\n        if (own.call(props, key)) {\n            let value = props[key];\n            /** @type {AttributeClean[string]} */ let definition;\n            if (own.call(allowed, key)) {\n                definition = allowed[key];\n            } else if (data(key) && own.call(allowed, \"data*\")) {\n                definition = allowed[\"data*\"];\n            } else {\n                continue;\n            }\n            value = Array.isArray(value) ? handlePropertyValues(schema, value, key, definition) : handlePropertyValue(schema, value, key, definition);\n            if (value !== undefined && value !== null) {\n                result[key] = value;\n            }\n        }\n    }\n    if (name && own.call(reqs, name)) {\n        for(key in reqs[name]){\n            if (!own.call(result, key)) {\n                result[key] = reqs[name][key];\n            }\n        }\n    }\n    return result;\n}\n/**\n * Always return a valid HTML5 doctype.\n *\n * @type {Handler}\n * @returns {string}\n */ function handleDoctypeName() {\n    return \"html\";\n}\n/**\n * Sanitize `tagName`.\n *\n * @param {Schema} schema\n * @param {string} tagName\n * @param {Node} _\n * @param {Array<string>} stack\n * @returns {string | false}\n */ function handleTagName(schema, tagName, _, stack) {\n    const name = typeof tagName === \"string\" ? tagName : \"\";\n    let index = -1;\n    if (!name || name === \"*\" || schema.tagNames && !schema.tagNames.includes(name)) {\n        return false;\n    }\n    // Some nodes can break out of their context if they don’t have a certain\n    // ancestor.\n    if (schema.ancestors && own.call(schema.ancestors, name)) {\n        while(++index < schema.ancestors[name].length){\n            if (stack.includes(schema.ancestors[name][index])) {\n                return name;\n            }\n        }\n        return false;\n    }\n    return name;\n}\n/**\n * See <https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments>\n *\n * @type {Handler}\n * @param {unknown} value\n * @returns {string}\n */ function handleCommentValue(_, value) {\n    /** @type {string} */ const result = typeof value === \"string\" ? value : \"\";\n    const index = result.indexOf(\"-->\");\n    return index < 0 ? result : result.slice(0, index);\n}\n/**\n * Sanitize `value`.\n *\n * @type {Handler}\n * @param {unknown} value\n * @returns {string}\n */ function handleValue(_, value) {\n    return typeof value === \"string\" ? value : \"\";\n}\n/**\n * Allow `value`.\n *\n * @type {Handler}\n * @param {unknown} value\n */ function allow(_, value) {\n    return value;\n}\n/**\n * Sanitize a property value which is a list.\n *\n * @param {Schema} schema\n * @param {Array<unknown>} values\n * @param {string} prop\n * @param {AttributeClean[string]} definition\n * @returns {Array<string | number>}\n */ function handlePropertyValues(schema, values, prop, definition) {\n    let index = -1;\n    /** @type {Array<string | number>} */ const result = [];\n    while(++index < values.length){\n        const value = handlePropertyValue(schema, values[index], prop, definition);\n        if (value !== undefined && value !== null) {\n            // @ts-expect-error Assume no booleans were in arrays.\n            result.push(value);\n        }\n    }\n    return result;\n}\n/**\n * Sanitize a property value.\n *\n * @param {Schema} schema\n * @param {unknown} value\n * @param {string} prop\n * @param {AttributeClean[string]} definition\n * @returns {PropertyValue}\n */ function handlePropertyValue(schema, value, prop, definition) {\n    if ((typeof value === \"boolean\" || typeof value === \"number\" || typeof value === \"string\") && safeProtocol(schema, value, prop) && (definition.length === 0 || definition.some((allowed)=>allowed && typeof allowed === \"object\" && \"flags\" in allowed ? allowed.test(String(value)) : allowed === value))) {\n        return schema.clobberPrefix && schema.clobber && schema.clobber.includes(prop) ? schema.clobberPrefix + value : value;\n    }\n}\n/**\n * Check whether `value` is a safe URL.\n *\n * @param {Schema} schema\n * @param {unknown} value\n * @param {string} prop\n * @returns {boolean}\n */ function safeProtocol(schema, value, prop) {\n    const url = String(value);\n    const colon = url.indexOf(\":\");\n    const questionMark = url.indexOf(\"?\");\n    const numberSign = url.indexOf(\"#\");\n    const slash = url.indexOf(\"/\");\n    const protocols = schema.protocols && own.call(schema.protocols, prop) ? schema.protocols[prop].concat() : [];\n    let index = -1;\n    if (protocols.length === 0 || colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign) {\n        return true;\n    }\n    while(++index < protocols.length){\n        if (colon === protocols[index].length && url.slice(0, protocols[index].length) === protocols[index]) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Create a map from a list of props or a list of properties and values.\n *\n * @param {Attributes[string]} values\n * @returns {AttributeClean}\n */ function toPropertyValueMap(values) {\n    /** @type {AttributeClean} */ const result = {};\n    let index = -1;\n    while(++index < values.length){\n        const value = values[index];\n        if (Array.isArray(value)) {\n            result[value[0]] = value.slice(1);\n        } else {\n            result[value] = [];\n        }\n    }\n    return result;\n}\n/**\n * Check if `prop` is a data property.\n *\n * @param {string} prop\n * @returns {boolean}\n */ function data(prop) {\n    return prop.length > 4 && prop.slice(0, 4).toLowerCase() === \"data\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/hast-util-sanitize/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/hast-util-sanitize/lib/schema.js":
/*!*******************************************************!*\
  !*** ./node_modules/hast-util-sanitize/lib/schema.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultSchema: () => (/* binding */ defaultSchema)\n/* harmony export */ });\n/** @type {import('./index.js').Schema} */ const defaultSchema = {\n    strip: [\n        \"script\"\n    ],\n    clobberPrefix: \"user-content-\",\n    clobber: [\n        \"name\",\n        \"id\"\n    ],\n    ancestors: {\n        tbody: [\n            \"table\"\n        ],\n        tfoot: [\n            \"table\"\n        ],\n        thead: [\n            \"table\"\n        ],\n        td: [\n            \"table\"\n        ],\n        th: [\n            \"table\"\n        ],\n        tr: [\n            \"table\"\n        ]\n    },\n    protocols: {\n        href: [\n            \"http\",\n            \"https\",\n            \"mailto\",\n            \"xmpp\",\n            \"irc\",\n            \"ircs\"\n        ],\n        cite: [\n            \"http\",\n            \"https\"\n        ],\n        src: [\n            \"http\",\n            \"https\"\n        ],\n        longDesc: [\n            \"http\",\n            \"https\"\n        ]\n    },\n    tagNames: [\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\",\n        \"br\",\n        \"b\",\n        \"i\",\n        \"strong\",\n        \"em\",\n        \"a\",\n        \"pre\",\n        \"code\",\n        \"img\",\n        \"tt\",\n        \"div\",\n        \"ins\",\n        \"del\",\n        \"sup\",\n        \"sub\",\n        \"p\",\n        \"ol\",\n        \"ul\",\n        \"table\",\n        \"thead\",\n        \"tbody\",\n        \"tfoot\",\n        \"blockquote\",\n        \"dl\",\n        \"dt\",\n        \"dd\",\n        \"kbd\",\n        \"q\",\n        \"samp\",\n        \"var\",\n        \"hr\",\n        \"ruby\",\n        \"rt\",\n        \"rp\",\n        \"li\",\n        \"tr\",\n        \"td\",\n        \"th\",\n        \"s\",\n        \"strike\",\n        \"summary\",\n        \"details\",\n        \"caption\",\n        \"figure\",\n        \"figcaption\",\n        \"abbr\",\n        \"bdo\",\n        \"cite\",\n        \"dfn\",\n        \"mark\",\n        \"small\",\n        \"span\",\n        \"time\",\n        \"wbr\",\n        \"input\"\n    ],\n    attributes: {\n        a: [\n            \"href\"\n        ],\n        img: [\n            \"src\",\n            \"longDesc\"\n        ],\n        input: [\n            [\n                \"type\",\n                \"checkbox\"\n            ],\n            [\n                \"disabled\",\n                true\n            ]\n        ],\n        li: [\n            [\n                \"className\",\n                \"task-list-item\"\n            ]\n        ],\n        div: [\n            \"itemScope\",\n            \"itemType\"\n        ],\n        blockquote: [\n            \"cite\"\n        ],\n        del: [\n            \"cite\"\n        ],\n        ins: [\n            \"cite\"\n        ],\n        q: [\n            \"cite\"\n        ],\n        \"*\": [\n            \"abbr\",\n            \"accept\",\n            \"acceptCharset\",\n            \"accessKey\",\n            \"action\",\n            \"align\",\n            \"alt\",\n            \"ariaDescribedBy\",\n            \"ariaHidden\",\n            \"ariaLabel\",\n            \"ariaLabelledBy\",\n            \"axis\",\n            \"border\",\n            \"cellPadding\",\n            \"cellSpacing\",\n            \"char\",\n            \"charOff\",\n            \"charSet\",\n            \"checked\",\n            \"clear\",\n            \"cols\",\n            \"colSpan\",\n            \"color\",\n            \"compact\",\n            \"coords\",\n            \"dateTime\",\n            \"dir\",\n            \"disabled\",\n            \"encType\",\n            \"htmlFor\",\n            \"frame\",\n            \"headers\",\n            \"height\",\n            \"hrefLang\",\n            \"hSpace\",\n            \"isMap\",\n            \"id\",\n            \"label\",\n            \"lang\",\n            \"maxLength\",\n            \"media\",\n            \"method\",\n            \"multiple\",\n            \"name\",\n            \"noHref\",\n            \"noShade\",\n            \"noWrap\",\n            \"open\",\n            \"prompt\",\n            \"readOnly\",\n            \"rel\",\n            \"rev\",\n            \"rows\",\n            \"rowSpan\",\n            \"rules\",\n            \"scope\",\n            \"selected\",\n            \"shape\",\n            \"size\",\n            \"span\",\n            \"start\",\n            \"summary\",\n            \"tabIndex\",\n            \"target\",\n            \"title\",\n            \"type\",\n            \"useMap\",\n            \"vAlign\",\n            \"value\",\n            \"vSpace\",\n            \"width\",\n            \"itemProp\"\n        ]\n    },\n    required: {\n        input: {\n            type: \"checkbox\",\n            disabled: true\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXNhbml0aXplL2xpYi9zY2hlbWEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHdDQUF3QyxHQUNqQyxNQUFNQSxnQkFBZ0I7SUFDM0JDLE9BQU87UUFBQztLQUFTO0lBQ2pCQyxlQUFlO0lBQ2ZDLFNBQVM7UUFBQztRQUFRO0tBQUs7SUFDdkJDLFdBQVc7UUFDVEMsT0FBTztZQUFDO1NBQVE7UUFDaEJDLE9BQU87WUFBQztTQUFRO1FBQ2hCQyxPQUFPO1lBQUM7U0FBUTtRQUNoQkMsSUFBSTtZQUFDO1NBQVE7UUFDYkMsSUFBSTtZQUFDO1NBQVE7UUFDYkMsSUFBSTtZQUFDO1NBQVE7SUFDZjtJQUNBQyxXQUFXO1FBQ1RDLE1BQU07WUFBQztZQUFRO1lBQVM7WUFBVTtZQUFRO1lBQU87U0FBTztRQUN4REMsTUFBTTtZQUFDO1lBQVE7U0FBUTtRQUN2QkMsS0FBSztZQUFDO1lBQVE7U0FBUTtRQUN0QkMsVUFBVTtZQUFDO1lBQVE7U0FBUTtJQUM3QjtJQUNBQyxVQUFVO1FBQ1I7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNEQyxZQUFZO1FBQ1ZDLEdBQUc7WUFBQztTQUFPO1FBQ1hDLEtBQUs7WUFBQztZQUFPO1NBQVc7UUFDeEJDLE9BQU87WUFDTDtnQkFBQztnQkFBUTthQUFXO1lBQ3BCO2dCQUFDO2dCQUFZO2FBQUs7U0FDbkI7UUFDREMsSUFBSTtZQUFDO2dCQUFDO2dCQUFhO2FBQWlCO1NBQUM7UUFDckNDLEtBQUs7WUFBQztZQUFhO1NBQVc7UUFDOUJDLFlBQVk7WUFBQztTQUFPO1FBQ3BCQyxLQUFLO1lBQUM7U0FBTztRQUNiQyxLQUFLO1lBQUM7U0FBTztRQUNiQyxHQUFHO1lBQUM7U0FBTztRQUNYLEtBQUs7WUFDSDtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRDtJQUNIO0lBQ0FDLFVBQVU7UUFDUlAsT0FBTztZQUNMUSxNQUFNO1lBQ05DLFVBQVU7UUFDWjtJQUNGO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1ibG9nLy4vbm9kZV9tb2R1bGVzL2hhc3QtdXRpbC1zYW5pdGl6ZS9saWIvc2NoZW1hLmpzPzEwNDEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEB0eXBlIHtpbXBvcnQoJy4vaW5kZXguanMnKS5TY2hlbWF9ICovXG5leHBvcnQgY29uc3QgZGVmYXVsdFNjaGVtYSA9IHtcbiAgc3RyaXA6IFsnc2NyaXB0J10sXG4gIGNsb2JiZXJQcmVmaXg6ICd1c2VyLWNvbnRlbnQtJyxcbiAgY2xvYmJlcjogWyduYW1lJywgJ2lkJ10sXG4gIGFuY2VzdG9yczoge1xuICAgIHRib2R5OiBbJ3RhYmxlJ10sXG4gICAgdGZvb3Q6IFsndGFibGUnXSxcbiAgICB0aGVhZDogWyd0YWJsZSddLFxuICAgIHRkOiBbJ3RhYmxlJ10sXG4gICAgdGg6IFsndGFibGUnXSxcbiAgICB0cjogWyd0YWJsZSddXG4gIH0sXG4gIHByb3RvY29sczoge1xuICAgIGhyZWY6IFsnaHR0cCcsICdodHRwcycsICdtYWlsdG8nLCAneG1wcCcsICdpcmMnLCAnaXJjcyddLFxuICAgIGNpdGU6IFsnaHR0cCcsICdodHRwcyddLFxuICAgIHNyYzogWydodHRwJywgJ2h0dHBzJ10sXG4gICAgbG9uZ0Rlc2M6IFsnaHR0cCcsICdodHRwcyddXG4gIH0sXG4gIHRhZ05hbWVzOiBbXG4gICAgJ2gxJyxcbiAgICAnaDInLFxuICAgICdoMycsXG4gICAgJ2g0JyxcbiAgICAnaDUnLFxuICAgICdoNicsXG4gICAgJ2JyJyxcbiAgICAnYicsXG4gICAgJ2knLFxuICAgICdzdHJvbmcnLFxuICAgICdlbScsXG4gICAgJ2EnLFxuICAgICdwcmUnLFxuICAgICdjb2RlJyxcbiAgICAnaW1nJyxcbiAgICAndHQnLFxuICAgICdkaXYnLFxuICAgICdpbnMnLFxuICAgICdkZWwnLFxuICAgICdzdXAnLFxuICAgICdzdWInLFxuICAgICdwJyxcbiAgICAnb2wnLFxuICAgICd1bCcsXG4gICAgJ3RhYmxlJyxcbiAgICAndGhlYWQnLFxuICAgICd0Ym9keScsXG4gICAgJ3Rmb290JyxcbiAgICAnYmxvY2txdW90ZScsXG4gICAgJ2RsJyxcbiAgICAnZHQnLFxuICAgICdkZCcsXG4gICAgJ2tiZCcsXG4gICAgJ3EnLFxuICAgICdzYW1wJyxcbiAgICAndmFyJyxcbiAgICAnaHInLFxuICAgICdydWJ5JyxcbiAgICAncnQnLFxuICAgICdycCcsXG4gICAgJ2xpJyxcbiAgICAndHInLFxuICAgICd0ZCcsXG4gICAgJ3RoJyxcbiAgICAncycsXG4gICAgJ3N0cmlrZScsXG4gICAgJ3N1bW1hcnknLFxuICAgICdkZXRhaWxzJyxcbiAgICAnY2FwdGlvbicsXG4gICAgJ2ZpZ3VyZScsXG4gICAgJ2ZpZ2NhcHRpb24nLFxuICAgICdhYmJyJyxcbiAgICAnYmRvJyxcbiAgICAnY2l0ZScsXG4gICAgJ2RmbicsXG4gICAgJ21hcmsnLFxuICAgICdzbWFsbCcsXG4gICAgJ3NwYW4nLFxuICAgICd0aW1lJyxcbiAgICAnd2JyJyxcbiAgICAnaW5wdXQnXG4gIF0sXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBhOiBbJ2hyZWYnXSxcbiAgICBpbWc6IFsnc3JjJywgJ2xvbmdEZXNjJ10sXG4gICAgaW5wdXQ6IFtcbiAgICAgIFsndHlwZScsICdjaGVja2JveCddLFxuICAgICAgWydkaXNhYmxlZCcsIHRydWVdXG4gICAgXSxcbiAgICBsaTogW1snY2xhc3NOYW1lJywgJ3Rhc2stbGlzdC1pdGVtJ11dLFxuICAgIGRpdjogWydpdGVtU2NvcGUnLCAnaXRlbVR5cGUnXSxcbiAgICBibG9ja3F1b3RlOiBbJ2NpdGUnXSxcbiAgICBkZWw6IFsnY2l0ZSddLFxuICAgIGluczogWydjaXRlJ10sXG4gICAgcTogWydjaXRlJ10sXG4gICAgJyonOiBbXG4gICAgICAnYWJicicsXG4gICAgICAnYWNjZXB0JyxcbiAgICAgICdhY2NlcHRDaGFyc2V0JyxcbiAgICAgICdhY2Nlc3NLZXknLFxuICAgICAgJ2FjdGlvbicsXG4gICAgICAnYWxpZ24nLFxuICAgICAgJ2FsdCcsXG4gICAgICAnYXJpYURlc2NyaWJlZEJ5JyxcbiAgICAgICdhcmlhSGlkZGVuJyxcbiAgICAgICdhcmlhTGFiZWwnLFxuICAgICAgJ2FyaWFMYWJlbGxlZEJ5JyxcbiAgICAgICdheGlzJyxcbiAgICAgICdib3JkZXInLFxuICAgICAgJ2NlbGxQYWRkaW5nJyxcbiAgICAgICdjZWxsU3BhY2luZycsXG4gICAgICAnY2hhcicsXG4gICAgICAnY2hhck9mZicsXG4gICAgICAnY2hhclNldCcsXG4gICAgICAnY2hlY2tlZCcsXG4gICAgICAnY2xlYXInLFxuICAgICAgJ2NvbHMnLFxuICAgICAgJ2NvbFNwYW4nLFxuICAgICAgJ2NvbG9yJyxcbiAgICAgICdjb21wYWN0JyxcbiAgICAgICdjb29yZHMnLFxuICAgICAgJ2RhdGVUaW1lJyxcbiAgICAgICdkaXInLFxuICAgICAgJ2Rpc2FibGVkJyxcbiAgICAgICdlbmNUeXBlJyxcbiAgICAgICdodG1sRm9yJyxcbiAgICAgICdmcmFtZScsXG4gICAgICAnaGVhZGVycycsXG4gICAgICAnaGVpZ2h0JyxcbiAgICAgICdocmVmTGFuZycsXG4gICAgICAnaFNwYWNlJyxcbiAgICAgICdpc01hcCcsXG4gICAgICAnaWQnLFxuICAgICAgJ2xhYmVsJyxcbiAgICAgICdsYW5nJyxcbiAgICAgICdtYXhMZW5ndGgnLFxuICAgICAgJ21lZGlhJyxcbiAgICAgICdtZXRob2QnLFxuICAgICAgJ211bHRpcGxlJyxcbiAgICAgICduYW1lJyxcbiAgICAgICdub0hyZWYnLFxuICAgICAgJ25vU2hhZGUnLFxuICAgICAgJ25vV3JhcCcsXG4gICAgICAnb3BlbicsXG4gICAgICAncHJvbXB0JyxcbiAgICAgICdyZWFkT25seScsXG4gICAgICAncmVsJyxcbiAgICAgICdyZXYnLFxuICAgICAgJ3Jvd3MnLFxuICAgICAgJ3Jvd1NwYW4nLFxuICAgICAgJ3J1bGVzJyxcbiAgICAgICdzY29wZScsXG4gICAgICAnc2VsZWN0ZWQnLFxuICAgICAgJ3NoYXBlJyxcbiAgICAgICdzaXplJyxcbiAgICAgICdzcGFuJyxcbiAgICAgICdzdGFydCcsXG4gICAgICAnc3VtbWFyeScsXG4gICAgICAndGFiSW5kZXgnLFxuICAgICAgJ3RhcmdldCcsXG4gICAgICAndGl0bGUnLFxuICAgICAgJ3R5cGUnLFxuICAgICAgJ3VzZU1hcCcsXG4gICAgICAndkFsaWduJyxcbiAgICAgICd2YWx1ZScsXG4gICAgICAndlNwYWNlJyxcbiAgICAgICd3aWR0aCcsXG4gICAgICAnaXRlbVByb3AnXG4gICAgXVxuICB9LFxuICByZXF1aXJlZDoge1xuICAgIGlucHV0OiB7XG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgZGlzYWJsZWQ6IHRydWVcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJkZWZhdWx0U2NoZW1hIiwic3RyaXAiLCJjbG9iYmVyUHJlZml4IiwiY2xvYmJlciIsImFuY2VzdG9ycyIsInRib2R5IiwidGZvb3QiLCJ0aGVhZCIsInRkIiwidGgiLCJ0ciIsInByb3RvY29scyIsImhyZWYiLCJjaXRlIiwic3JjIiwibG9uZ0Rlc2MiLCJ0YWdOYW1lcyIsImF0dHJpYnV0ZXMiLCJhIiwiaW1nIiwiaW5wdXQiLCJsaSIsImRpdiIsImJsb2NrcXVvdGUiLCJkZWwiLCJpbnMiLCJxIiwicmVxdWlyZWQiLCJ0eXBlIiwiZGlzYWJsZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/hast-util-sanitize/lib/schema.js\n");

/***/ })

};
;