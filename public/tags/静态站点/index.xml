<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>静态站点 on 小白开发助手</title>
    <link>http://localhost:1313/tags/%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9/</link>
    <description>Recent content in 静态站点 on 小白开发助手</description>
    <generator>Hugo -- 0.125.7</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 20 May 2025 23:18:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>零成本建站指南：不用买域名服务器，GitHub&#43;Vercel免费搭建个人网站</title>
      <link>http://localhost:1313/posts/how-to-build-website-for-free/</link>
      <pubDate>Tue, 20 May 2025 23:18:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/how-to-build-website-for-free/</guid>
      <description>一、为什么选择GitHub+Vercel组合 传统建站需要域名和服务器，这对新手来说门槛太高。现在通过GitHub的代码托管能力和Vercel的免费部署服务，我们可以完全零成本实现：
✅ 免服务器费用（Vercel免费额度足够个人使用） ✅ 免域名费用（使用默认的*.vercel.app二级域名） ✅ 自动HTTPS加密（Vercel自动配置SSL证书） 二、准备工作 注册GitHub账号（官网） 注册Vercel账号（支持GitHub一键登录） 本地安装VS Code编辑器 三、三步搭建基础网站 步骤1：创建代码仓库 在GitHub新建名为my-website的仓库，初始化时勾选&amp;quot;Add a README file&amp;quot;
步骤2：编写静态页面 在仓库根目录创建index.html：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;我的免费网站&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;由GitHub+Vercel驱动&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 步骤3：部署到Vercel 登录Vercel控制台 点击&amp;quot;Import Project&amp;quot;选择GitHub仓库 保持默认配置点击部署，30秒后即可获得在线地址 四、进阶配置技巧 自定义域名（可选） 若已有域名，在Vercel的&amp;quot;Domains&amp;quot;设置中添加：
CNAME记录 → your-domain.com → cname.vercel-dns.com 配置自动更新 在项目根目录创建vercel.json实现自动构建：
{ &amp;#34;builds&amp;#34;: [ { &amp;#34;src&amp;#34;: &amp;#34;/*&amp;#34;, &amp;#34;use&amp;#34;: &amp;#34;@vercel/static&amp;#34; } ] } 五、常见问题解答 Q：网站访问量有限制吗？ A：Vercel免费版每月提供100GB流量，个人博客完全够用
Q：代码必须公开吗？ A：GitHub公共仓库免费，私有仓库需付费。建议初期使用公共仓库
立即动手尝试，开启你的第一个免费网站吧！</description>
    </item>
    <item>
      <title>解决Hugo子模块路径配置错误，导致的预览URL出错</title>
      <link>http://localhost:1313/posts/fix-hugo-submodule-preview-url/</link>
      <pubDate>Sun, 11 May 2025 01:26:04 +0800</pubDate>
      <guid>http://localhost:1313/posts/fix-hugo-submodule-preview-url/</guid>
      <description>部署这个网站的时候遇到了一个问题，本地测试的时候文章都是正常的，但是部署到 vercel 之后，页面的URL出错。 全部都是 localhost:1313 开头的URL，而不是预期的 www.thecodecraft.site 开头的URL。 在 vercel 的 build logs 中发现了警告报错，逐行研读，最终解决了问题：
问题现象 在 Vercel运行项目时，主题资源文件加载路径异常，控制台出现404错误。这会导致 vercel 的项目主页不显示预览效果。 同时，通过域名访问时，所有的链接都会失效，被解析为解析为localhost:1313/...。
排查过程 检查主题子模块配置 [submodule &amp;#34;themes/PaperMod&amp;#34;] path = themes/PaperMod url = https://github.com/adityatelange/hugo-PaperMod.git 发现主题资源路径被解析为http://localhost:1313/themes/PaperMod/... 确认Hugo默认将主题目录视为普通内容目录 根本原因 Hugo默认配置将themes目录作为内容资源路径处理，导致：
主题子模块路径被错误解析 静态资源路径生成错误 解决方案 修改.gitmodules配置指定特殊目录标记：
[submodule &amp;#34;hugo_modules/PaperMod&amp;#34;] path = hugo_modules/PaperMod url = https://github.com/adityatelange/hugo-PaperMod.git 关键修改点：
将themes目录重命名为hugo_modules 通过Hugo的模块系统自动识别专用目录 实施效果 资源路径正确解析为http://localhost:1313/PaperMod/... 主题样式和脚本加载正常 预览功能完全恢复 技术总结 Hugo对特殊目录名称有特定处理逻辑 子模块配置需与Hugo模块系统配合使用 使用hugo mod命令管理依赖更可靠 hugo mod get github.com/adityatelange/hugo-PaperMod </description>
    </item>
    <item>
      <title>Vercel免费替代方案：如何不花钱练习多个网站模板</title>
      <link>http://localhost:1313/posts/vercel-free-alternatives-for-practice/</link>
      <pubDate>Sun, 11 May 2025 01:02:04 +0800</pubDate>
      <guid>http://localhost:1313/posts/vercel-free-alternatives-for-practice/</guid>
      <description>问题背景 在Vercel上尝试部署网站时，很多人会遇到这样的问题：免费资源有限，特别是数据库等服务往往只能免费使用一次，之后就需要付费。对于想要练习多个网站模板的开发者来说，这是一个不小的障碍。本文将分享一些替代方案，帮助你在不花钱的情况下练习更多的网站模板。
免费托管平台比较 除了Vercel，还有其他一些提供免费层级的托管平台：
Netlify - 提供类似Vercel的免费托管服务，每月有100GB的带宽限制和300分钟的构建时间 GitHub Pages - 完全免费，适合静态网站 Cloudflare Pages - 提供慷慨的免费层级，无带宽限制 Render - 有免费层级，但有使用限制 Railway - 提供$5的免费额度，足够运行小型项目 本地开发环境 最经济实惠的方式是在本地搭建开发环境：
Docker - 使用容器技术在本地模拟生产环境，可以同时运行多个项目而不互相干扰 XAMPP/MAMP - 为PHP/MySQL项目提供简单的本地开发栈 Node.js本地服务器 - 使用Express或其他框架在本地运行Node.js应用 LocalWP - 专为WordPress开发者设计的本地环境 使用模拟数据进行前端开发 对于前端开发，你可以：
JSON Server - 创建一个完整的假REST API，无需实际数据库 Mock Service Worker - 在浏览器中拦截网络请求并模拟响应 静态JSON文件 - 简单项目可以直接使用静态JSON文件模拟API响应 LocalStorage/IndexedDB - 利用浏览器存储功能模拟后端存储 不需要付费数据库的项目推荐 以下是一些可以练习的项目类型，它们不需要复杂的后端数据库：
静态博客 - 使用Hugo、Jekyll或Gatsby构建 单页应用(SPA) - 使用React、Vue或Angular构建，数据存储在LocalStorage 作品集网站 - 展示你的项目和技能 登陆页面 - 练习UI/UX设计和转化率优化 计算器、待办事项应用 - 简单但实用的JavaScript应用 免费数据库选项 如果确实需要数据库，这些选项提供免费层级：</description>
    </item>
    <item>
      <title>Namecheap域名托管Cloudflare保姆级教程</title>
      <link>http://localhost:1313/posts/namecheap-cloudflare-dns-guide/</link>
      <pubDate>Tue, 06 May 2025 22:03:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/namecheap-cloudflare-dns-guide/</guid>
      <description>习惯使用 Cloudflare，买了新域名之后，要怎么托管到 Cloudflare 上呢？ 今天用 NameCheap 为例，介绍一下托管到 Cloudflare 上的流程。 手把手教你两把Namecheap域名托管到Cloudflare！
方案选择（5秒决策版） 🔹 只想用Cloudflare的CDN加速 ➔ 选DNS托管
DNS托管（保留Namecheap注册） 这个方案适合「用Cloudflare加速但不想转移域名」的小伙伴，就像一次简单的搬家。
第一步：认领Cloudflare家门牌 登录Cloudflare控制台 ➔ 点击「添加站点」 输入裸域名（例：yourdomain.com 别带www） 选择免费套餐 → 等系统扫描现有DNS记录（不想要的直接删） 记下分配的两个Nameservers地址（例：kipp.ns.cloudflare.com） 第二步：Namecheap换门锁 Namecheap后台找到域名 → 点击「Manage」 在下方的「Nameservers」域名服务器里选择「Custom DNS」 粘贴第一步提到的 Cloudflare 给的俩地址 → 保存 去泡杯咖啡等生效（通常10分钟，最长24小时） 第三步：布置Cloudflare新家 # 常用DNS记录配置示例 A记录 → @ 指向 104.21.67.166（主域名） CNAME记录 → www 指向 yourdomain.com（自动跳转） ⚠️ 重要设置： 回到 Cloudflare 里找到 SSL/TLS 选择配置「完全」模式，强制HTTPS更安全
一般来说，现在的 Cloudflare 都能自动检测到 Namecheap 的域名，无需手动配置。
血泪经验总结 改DNS后有的地区要等24小时生效，期间网站抽风属正常 SSL证书错误多半是因为没开「完全」模式 小贴士：这种方案只是用 CF 的 CDN 加速和简单的统计，方便管理，域名的续费和归属还是在 Namecheap 里。不会有更多麻烦的操作。顺利的话，15分钟搞定！</description>
    </item>
    <item>
      <title>解决 Hugo 预览时出现 Page Not Found 的问题</title>
      <link>http://localhost:1313/posts/fix-hugo-preview-page-not-found/</link>
      <pubDate>Sun, 27 Apr 2025 10:00:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/fix-hugo-preview-page-not-found/</guid>
      <description>搭建这个网站的时候，就遇到了这个问题，记录一下。 “Page Not Found” 是 Hugo 网站预览时常见的错误提示。
问题现象 在使用 hugo server 命令预览 Hugo 网站时，浏览器访问 http://localhost:1313/ （演示用的端口号，不必一致）， 可能会显示 &amp;ldquo;Page Not Found&amp;rdquo; 的错误页面，而不是预期的网站内容。
可能的原因与解决方法 在网上搜索一圈，基本可以确定，这个问题与 Hugo 的主题配置有关。
配置文件名错误 许多旧的教程或文档可能会引导我们将主题配置放在 config.toml 文件中。 但，这已经过时了。 根据 Hugo 的较新版本和官方文档，主题相关的配置应该放在根目录下的 hugo.toml 文件里。
我们需要检查项目根目录下是否存在 hugo.toml 文件，并确保您的主题设置（例如 theme = &amp;quot;your-theme-name&amp;quot;）是在这个文件中配置的。
错误示例 (config.toml)：
# 这是旧的或不推荐的方式 baseURL = &amp;#34;http://localhost:1313/&amp;#34; title = &amp;#34;我的网站&amp;#34; languageCode = &amp;#34;zh-CN&amp;#34; theme = &amp;#34;ananke&amp;#34; 正确示例 (hugo.toml)：
baseURL = &amp;#34;http://localhost:1313/&amp;#34; title = &amp;#34;我的网站&amp;#34; languageCode = &amp;#34;zh-CN&amp;#34; theme = &amp;#34;ananke&amp;#34; hasCJKLanguage = true [pagination] pagerSize = 5 如果您之前使用了 config.</description>
    </item>
  </channel>
</rss>
